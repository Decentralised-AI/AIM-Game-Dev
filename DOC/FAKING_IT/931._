            



        //:#_FADA_BYTE_LOOKUP_TABLES_#:[930]:------------://

            //: @l_@ : Lookup_Table ( Local Reference )  ://
            const 
            ,   l_fx4 = d_dacafad_fadafx4_r08_g08_b08_a08 //
            ,   l_f16 = d_dacafad_fadav16_r08_g08_b08_a08 //
            ,   l_b16 = d_dacafad_bombv16_r08_g08_b08_a08 //
            ////                                      //////
            ,   l_v16bomb_v16fada =d_rulbomb_v16bomb_v16fada
            ////                                      //////
            ,   don_t ="[DONT_NEED:d_rulfada_fx4_db2]"/// //
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

            ERR( "[ CREATE_DACAFAD_SUBSYSTEM ]" );

        //:------------:#_FADA_BYTE_LOOKUP_TABLES_#:[930]://
        //:#_FADA_CACHE_VARS_#:[930]:--------------------://

            const   r_g_b_a=( 4 /** STRIDE_OF_FOUR **/ );;;;

            /////   fx4 =( "[$_FX4_CONTAINED_IN_V16_$]" );;;   
            /////   db2 =( "[$_DB2_CONTAINED_IN_V16_$]" );;;
            const   v16 =( "[_BE_MORE_SPECIFIC_KANJI_]" );;;

            let mod_tik ;    
            let b32_fad ; 
            let v16_fad ;

            let     fx4 ; //:Extract_From[ v16_fad ]:::::://
            let     db2 ; //:Extract_From[ v16_fad ]:::::://

            let     r08 ;
            let     g08 ;
            let     b08 ;
            let     a08 ;

            let     b_i ; //: @b_i@ : Byte_Index ::::::::://
            let   b_i_b ; //: @bif@ : Byte_Index_FADA :::://
            let   b_i_f ; //: @bif@ : Byte_Index_BOMB :::://

        //:--------------------:#_FADA_CACHE_VARS_#:[930]://
        //:#_MODULATE_GAMETIME_TO_28_BITS_#:[930]:-------://

            mod_tik =(((1+d_tik) % (0x0FFFFFFF+1) )>>>0);;;;   

        //:-------:#_MODULATE_GAMETIME_TO_28_BITS_#:[930]://   
        //:#_FOUR_FADA_OF_THE_APOCALYPSE_#:[930]:--------://

            for(v16_fad=0 ; v16_fad<=( 16-1 ) ; v16_fad++ ){

                b32_fad =(( 0x00    ////////////////////////          
                                        ////////////////////          
                |   ( v16_fad << 28 )   ////////////////////          
                |   ( mod_tik <<  0 )   ////////////////////          
                                        ////////////////////          
                )>>>0 );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                                          
                r08 =((( b32_fad >>> 24 )&(0xFF))>>>0);               
                g08 =((( b32_fad >>> 16 )&(0xFF))>>>0);               
                b08 =((( b32_fad >>>  8 )&(0xFF))>>>0);               
                a08 =((( b32_fad >>>  0 )&(0xFF))>>>0);  

                db2 =( ( ( v16_fad >> 2 )&(0x03))>>>0);
                fx4 =( ( ( v16_fad >> 0 )&(0x03))>>>0);

                //:#_OFFICIAL_FX4_FADA_#:[930]:----------://
                if(    0x00000000
                ||( 0x1==db2 && 1==fx4 ) //: $_V16_PIN_$ ://      
                                         //: $_V16_SPK_$ ://

                ||( 0x2==db2 && 1==fx4 ) //: $_V16_LAZ_$ ://
                                         //: $_V16_ION_$ ://

                ||( 0x2==db2 && 3==fx4 ) //: $_V16_JAX_$ ://
                                         //: $_V16_FIR_$ ://

                ||( 0x2==db2 && 3==fx4 ) //: $_V16_BOX_$ ://
                                         //: $_V16_PLA_$ ://
                ){
                      b_i =(     fx4*r_g_b_a );
                    l_fx4[ b_i+0 ]=(     r08 );
                    l_fx4[ b_i+1 ]=(     g08 );
                    l_fx4[ b_i+2 ]=(     b08 );
                    l_fx4[ b_i+3 ]=(     a08 );
                };;
                //:----------:#_OFFICIAL_FX4_FADA_#:[930]://
                //:#_STORE_ALL_FADA_#:[930]:-------------://
                if( 1 === 1 ){

                      b_i =( v16_fad*r_g_b_a )
                    l_f16[ b_i+0 ]=(     r08 );
                    l_f16[ b_i+1 ]=(     g08 );
                    l_f16[ b_i+2 ]=(     b08 );
                    l_f16[ b_i+3 ]=(     a08 );
                };;
                //:-------------:#_STORE_ALL_FADA_#:[930]://

            };;
        //:--------:#_FOUR_FADA_OF_THE_APOCALYPSE_#:[930]://
        
            for(v16_bom=0 ; v16_bom<=( 16-1 ) ; v16_bom++ ){

                //: TAG[ v16_bom_v16_fad ]:::::::::::::::://    
                //: TAG[ rulbomb_v16_v16 ]:::::::::::::::://    
                v16_fad =( l_v16bomb_v16fada[ v16_bom ] );;;    
    
                  b_i_b =( v16_fad*r_g_b_a );
                  b_i_f =( v16_bom*r_g_b_a );
                l_b16[ b_i_b+0 ]=( l_f16[ b_i_f+0 ] );
                l_b16[ b_i_b+1 ]=( l_f16[ b_i_f+1 ] );
                l_b16[ b_i_b+2 ]=( l_f16[ b_i_f+2 ] );
                l_b16[ b_i_b+3 ]=( l_f16[ b_i_f+3 ] );
            };;




    #_FADA_BYTE_LOOKUP_TABLES_# :-----------------------------+  // [930]
                                                              |  // [930]
        Lookup tables that store FADA values for explosions   |  // [930]
        in UN_PACKED R_G_B_A format. We are storing in        |  // [930]
        UNPACKED_FORMAT because the native format of          |  // [930]
        our CPU_SIDE textures is R_G_B_A byte_array(s).       |  // [930]
                                                              |  // [930]
    :-----------------------------: #_FADA_BYTE_LOOKUP_TABLES_#  // [930]
    #_FADA_CACHE_VARS_# :-------------------------------------+  // [930]
                                                              |  // [930]
        Variables we will need in order to create our         |  // [930]
        "FADA_CACHE". The cache of fada value for all         |  // [930]
        V16_FADA values.                                      |  // [930]
                                                              |  // [930]
        @V16_GEOM@ : A[ v16 ]value pulled from[ GEOM_LAYER ]  |  // [930]
        @V16_BOMB@ : A[ v16 ]value pulled from[ BOMB_LAYER ]  |  // [930]
        @V16_FADA@ : A[ v16 ]value pulled from[ FADA_LAYER ]  |  // [930]
                                                              |  // [930]
        @GEO_BINTILE@ : BIN[ 1111 |..LAYER_SPECIFIC_BITS.. ]  |  // [930]
        @BOM_BINTILE@ : BIN[ 1111 |..LAYER_SPECIFIC_BITS.. ]  |  // [930]
        @FAD_BINTILE@ : BIN[ 1111 |..LAYER_SPECIFIC_BITS.. ]  |  // [930]
                             ^^^^                             |  // [930]
                             ||||                             |  // [930]
            +----------------++++-----------------------+     |  // [930]
            |   Most significant 4 bits is __ALWAYS__   |     |  // [930]
            |   the[ v16 ]value, no matter the layer,   |     |  // [930]
            |   but after that, the interpretation of   |     |  // [930]
            |   the bits differs across layers.         |     |  // [930]
            +----------------====-----------------------+     |  // [930]
                                                              |  // [930]
        $_FX4_CONTAINED_IN_V16_$ :-------------------------+  |  // [930]
                                                           |  |  // [930]
            We have no need for a "fx4" variable here      |  |  // [930]
            because it is contained with "v16" and we      |  |  // [930]
            want a lookup value for EVERY v16 value.       |  |  // [930]
                                                           |  |  // [930]
            BIN[ 1_1  1_1 ] <--- FOUR_BITS                 |  |  // [930]
                 ^^^  ^^^                                  |  |  // [930]
                 db2  fx4                                  |  |  // [930]
        :-------------------------: $_FX4_CONTAINED_IN_V16_$  |  // [930]
        $_DB2_CONTAINED_IN_V16_$ :-------------------------+  |  // [930]
                                                           |  |  // [930]
            We have no need for a "db2" variable here      |  |  // [930]
            because it is contained with "db2" and we      |  |  // [930]
            want a lookup value for EVERY db2 value.       |  |  // [930]
                                                           |  |  // [930]
            BIN[ 1_1  1_1 ] <--- FOUR_BITS                 |  |  // [930]
                 ^^^  ^^^                                  |  |  // [930]
                 db2  fx4                                  |  |  // [930]
        :-------------------------: $_DB2_CONTAINED_IN_V16_$  |  // [930]
                                                              |  // [930]
    :-------------------------------------: #_FADA_CACHE_VARS_#  // [930]
    #_MODULATE_GAMETIME_TO_28_BITS_# :------------------------+  // [930]
                                                              |  // [930]
        The most significant bits of a FADA_TILE store        |  // [930]
        the[ V16 ]value. The remaining 28 bits are used       |  // [930]
        for a timestamp that allows us to animate explosions. |  // [930]
                                                              |  // [930]
        We need to modulate the[ game_time / game_ticker ]    |  // [930]
        to be exactly 28_BITS so that it does not             |  // [930]
        corrupt the[ V16 ]value when we pack evertyhing       |  // [930]
        together.                                             |  // [930]
                                                              |  // [930]
    :------------------------: #_MODULATE_GAMETIME_TO_28_BITS_#  // [930]
    #_FOUR_FADA_OF_THE_APOCALYPSE_# :-------------------------+  // [930]
                                                              |  // [930]
        [ db2:0x1 ]&&[ fx4 == 1 ]: FADA_CYAN   / FADA_SPARK   |  // [930]
        [ db2:0x2 ]&&[ fx4 == 2 ]: FADA_YELLOW / FADA_LAZER   |  // [930]
        [ db2:0x2 ]&&[ fx4 ==_3_]: FADA_ORANGE / FADA_FLAME   |  // [930]
        [ db2:0x2 ]&&[ fx4 ==_3_]: FADA_RED    / FADA_PLAZMA  |  // [930]
                                                              |  // [930]
        Yes, the LAST_TWO are BOTH_THREE( fx4 ==_3_ )         |  // [930]
        Only [ FADA_CYAN / FADA_SPARK ]is  low  damage bit(0x1)  // [930]
        All  [ ALL_OTHER_FADA_VALUES  ]use high damage bit(0x2)  // [930]
                                                              |  // [930]
        #_OFFICIAL_FX4_FADA_# :---------------------------+   |  // [930]
                                                          |   |  // [930]
            Though you can emit a FADA tile with any      |   |  // [930]
            [ DAMAGE_BIT( db2 ) +PLUS+ EFFECT_BIT( fx4 ) ]|   |  // [930]
            combination you want, there is an official    |   |  // [930]
            [ db2,fx4 ]pairing for a given [ fx4 ]value.  |   |  // [930]
                                                          |   |  // [930]
        :---------------------------: #_OFFICIAL_FX4_FADA_#   |  // [930]
        #_STORE_ALL_FADA_# :------------------------------+   |  // [930]
                                                          |   |  // [930]
            All we are doing is taking the current index  |   |  // [930]
            which is the FADA V16 value and bit packing   |   |  // [930]
            it together with the current game timestamp   |   |  // [930]
            to save time later. Nothing fancy.            |   |  // [930]
                                                          |   |  // [930]
        :------------------------------: #_STORE_ALL_FADA_#   |  // [930]
                                                              |  // [930]
                                                              |  // [930]
    :-------------------------: #_FOUR_FADA_OF_THE_APOCALYPSE_#  // [930]



























    SECTION : _I_DONT_NEED_NO_ONE_

            //:#_AIB_ALWAYS_IN_BOUNDS_#:-----------------://     // [931]
                                                                 // [931]
                F_BOMSIMP_EFC_AIB_R13_X64_Y64_DPI_V16(           // [931]
                                  r13,x64,y64,dpi,v16 );         // [931]
                                                                 // [931]
            //:-----------------:#_AIB_ALWAYS_IN_BOUNDS_#://     // [931] 