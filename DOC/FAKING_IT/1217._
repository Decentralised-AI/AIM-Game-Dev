                
    //: $_DUGMAR_GOES_HERE_$ ://

                //: 1234567  
                //:@zerange@ : Zeroed_Out_Range :::::::::://
                //:@zeromax@ : Zeroed_Out_Range_Max_Index://
                UV2 zeromax =( uv2_mv1 - u_1 );;;;;;;;;;;;;;

                UV2 dug_mar ;;//: $_DUG_MARionette_$ ::::://
                //:@dug_mar@ : DiscUnitGlobal_MARionette ://
                //:@mar_dug@ : OTHER_WAY_AROUND_BITCHES  ://

                //:#_CALC_DUGMAR_#:[1_216]:--------------://

                    dug_mar.x =( v_gtx * DUT )+( v_dix );
                    dug_mar.y =( v_gty * DUT )+( v_diy );

                //:--------------:#_CALC_DUGMAR_#:[1_216]://
                //:#_VP1_0RANGE_POS_#:[1_216]:-----------://
                    UV2 playzer =( UV2(
                                    dug_mar.x - EDG_LEF
                                  , dug_mar.y - EDG_RIG
                                  );;
                //:-----------:#_VP1_0RANGE_POS_#:[1_216]://



    #_CALC_DUGMAR_# :-----------------------------------------:  // [1_216]
                                                              |  // [1_216]
        Calculate the "DUGMAR" value.                         |  // [1_216]
        The "Discrete Units GLobal" [ digital_plank ]         |  // [1_216]
        unit position of our[ sprite / marionette / mar ].    |  // [1_216]
                                                              |  // [1_216]
        We can take this position and make it relative        |  // [1_216]
        to the[ off_screen_data_viewport / VP1 ]to figure     |  // [1_216]
        out where the[ player / marionette ]should be         |  // [1_216]
        on the screen.                                        |  // [1_216]
                                                              |  // [1_216]
    :-----------------------------------------: #_CALC_DUGMAR_#  // [1_216]
    $_DUG_MARionette_$ :--------------------------------------:  // [1_216]
                                                              |  // [1_216]
        @dug_mar@ : Discrete_Units_Global____MARionette       |  // [1_216]
                  : The global position of the player         |  // [1_216]
                  : within the[ digital_planck_space ]        |  // [1_216]
                  :           [ digital_plank_space  ]        |  // [1_216]
                  : that makes up the[ renderable_space ]     |  // [1_216]
                  : of our renderer.                          |  // [1_216]
                                                              |  // [1_216]
        Roughly you could call the[ renderable_space ]        |  // [1_216]
        our game's[ world_space ]but that is kind of          |  // [1_216]
        confusing because we[ CANT_LOAD_EVERY_LEVELPACK ]     |  // [1_216]
        in the server into the game at once. We only          |  // [1_216]
        render a small[ 3_X_3 ]SUB_CHUNK of the[ MMO_WORLD ]  |  // [1_216]
        within the[ rendering_engine ]at any given time.      |  // [1_216]
                                                              |  // [1_216]
    :--------------------------------------: $_DUG_MARionette_$  // [1_216]
    #_VP1_0RANGE_POS_# :--------------------------------------:  // [1_216]
                                                              |  // [1_216]
        Find the player's position on[ VP1 ]in terms of       |  // [1_216]
        [ zeroed out range ]where players MINIMUM POSITION    |  // [1_216]
        on the viewport is going to be 0 and the              |  // [1_216]
        MAXIMUM POSITION on the viewport will be              |  // [1_216]
        equal to[ zeromax ].                                  |  // [1_216]
                                                              |  // [1_216]
    :--------------------------------------: #_VP1_0RANGE_POS_#  // [1_216]