  
    I was copying from the wrong shader code.

    $_CAP_N_DIA_$ :---------------------------------------:[15P] // [1_180]
                                                          |[15P] // [1_180]
        +-----------------------------------------------------+  // [1_180]
        |                                                     |  // [1_180]
        |  @CAP_N_DIA@ : CAPital_N_DIAgonal ? I think.        |  // [1_180]
        |                                                     |  // [1_180]
        |  This commentary was stolen from the test           |  // [1_180]
        |  bed project for creating[ stand_alone ]            |  // [1_180]
        |  sprite renderer for artemis system research.       |  // [1_180]
        |                                                     |  // [1_180]
        |  So here is interesting thing... The draw           |  // [1_180]
        |  call for the sprite shader still needs             |  // [1_180]
        |  a "full screen quad" to work correctly.            |  // [1_180]
        |                                                     |  // [1_180]
        |  The "[15P]" you see here is a delta marker         |  // [1_180]
        |  belonging to :                                     |  // [1_180]
        |                                                     |  // [1_180]
        |  AIM/DOC/RAD/POINT_SPRITE/POI_015.HTM               |  // [1_180]
        +-----------------------------------------------------+  // [1_180]
                                                          |[15P] // [1_180]
        @BIG_N@ : BIG "N" , literally drawing a big "N"   |[15P] // [1_180]
                : using 4 verts, which can create         |[15P] // [1_180]
                : 2 triangles to cover the entire         |[15P] // [1_180]
                : screen in homogeneous coordinates.      |[15P] // [1_180]
                                                          |[15P] // [1_180]
            +-------+      +-------+                      |[15P] // [1_180]
            |       |      |       |                      |[15P] // [1_180]
            | (0,1) |      | (1,1) |    (#,#)==(v_x,v_y)  |[15P] // [1_180]
            |       |      |       |                      |[15P] // [1_180]
            +---+---+      +---+---+                      |[15P] // [1_180]
                ^    \         ^                          |[15P] // [1_180]
                ^     \        ^                          |[15P] // [1_180]
                ^      \       ^                          |[15P] // [1_180]
                ^       \      ^                          |[15P] // [1_180]
                ^        \     ^                          |[15P] // [1_180]
                ^         \    ^                          |[15P] // [1_180]
            +---+---+      +---+---+                      |[15P] // [1_180]
            |       |      |       |                      |[15P] // [1_180]
            | (0,0) |      | (1,0) |                      |[15P] // [1_180]
            |       |      |       |                      |[15P] // [1_180]
            +-------+      +-------+                      |[15P] // [1_180]
                                                          |[15P] // [1_180]
            The "BIG_N" here is __NOT__ in homogeneous    |[15P] // [1_180]
            coordinates however, so we need to apply      |[15P] // [1_180]
            a formula so that :                           |[15P] // [1_180]
                                                          |[15P] // [1_180]
            ( 0 )====>( -1 )                              |[15P] // [1_180]
            ( 1 )====>( +1 )                              |[15P] // [1_180]
                                                          |[15P] // [1_180]
            +-----------------+-----------------+         |[15P] // [1_180]
            |                 |                 |         |[15P] // [1_180]
            |                                   |         |[15P] // [1_180]
            |                 |                 |         |[15P] // [1_180]
            + - - - - - - -( 0,0 )- - - - - - - +         |[15P] // [1_180]
            |                 |                 |         |[15P] // [1_180]
            |                                   |         |[15P] // [1_180]
            |                 |                 |         |[15P] // [1_180]
            +-----------------+-----------------+         |[15P] // [1_180]
                                                          |[15P] // [1_180]
        In WebGL , a RIGHT handed coordinate system is    |[15P] // [1_180]
        used. This is because /G/U/N/S/ are used with     |[15P] // [1_180]
        your RIGHT_HAND and WebGL is trying to shoot      |[15P] // [1_180]
        you in the face with bullets that have a          |[15P] // [1_180]
        positive forward velocity.                        |[15P] // [1_180]
                                                          |[15P] // [1_180]
        Hope this helps,                                  |[15P] // [1_180]
                                                          |[15P] // [1_180]
        - KanjiCoder                                      |[15P] // [1_180]
                                                          |[15P] // [1_180]
    :---------------------------------------:$_CAP_N_DIA_$:[15P] // [1_180]