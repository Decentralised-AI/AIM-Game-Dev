
    Hackish Rebased... Again.


    F_TLT_UTM_D4D_DUG :

            let d4d =( d_utm_d4d_001 );;;;;;;;;;;;;;;;;;;;;;     // [1_238]
            let dug =( d_utm_dug_002 );;;;;;;;;;;;;;;;;;;;;;     // [1_238]
                                                                 // [1_238]
            let exp_dux ; //: Expected_DUX ::::::::::::::://     // [1_238]
            let exp_duy ; //: Expected_DUY ::::::::::::::://     // [1_238]
            let bas     ; //: Base_Address ::::::::::::::://     // [1_238]
            let t_i     ; //: Test Index   ::::::::::::::://     // [1_238]
            let t_i_m_i ; //: MAX_DEX      ::::::::::::::://     // [1_238]
                                                                 // [1_238]
            const macro_num_tests=( 1 );;;;;;;;;;;;;;;;;;;;;     // [1_238]
                                                                 // [1_238]
            let utt_inn_d4d=(F_ARR_U32( 4 * macro_num_tests      // [1_238]
                                                                 // [1_238]
            ,   0x00000000,0x00000000,0x00000000,0x00000000      // [1_238]
            ));;                                                 // [1_238]
            let utt_out_dug=(F_ARR_U32( 2 * macro_num_tests      // [1_238]
                                                                 // [1_238]
            ,   0x00000000,0x00000000                            // [1_238]
            ));;                                                 // [1_238]
                                                                 // [1_238]
            t_i_m_i=( macro_num_tests - 1 );;;;;;;;;;;;;;;;;     // [1_238]
            for( t_i = 0 ; t_i <=( t_i_m_i ) ; t_i ++ ){ ///     // [1_238]
                                                                 // [1_238]
                bas =( t_i * 4 );;;;;;;;;;;;;;;;;;;;             // [1_238]
                d4d.m_gtx =(   utt_inn_d4d[ bas+0 ] );           // [1_238]
                d4d.m_gty =(   utt_inn_d4d[ bas+1 ] );           // [1_238]
                d4d.m_dix =(   utt_inn_d4d[ bas+2 ] );           // [1_238]
                d4d.m_diy =(   utt_inn_d4d[ bas+3 ] );           // [1_238]
                                                                 // [1_238]
                bas =( t_i * 2 );;;;;;;;;;;;;;;;;;;;             // [1_238]
                exp_dux =( utt_out_dug[ bas+0 ] );               // [1_238]
                exp_duy =( utt_out_dug[ bas+1 ] );               // [1_238]
                                                                 // [1_238]
                F_D4D_DUG( d4d , dug );                          // [1_238]
                                                                 // [1_238]
                if( dug.m_dux != exp_dux                         // [1_238]
                ||  dug.m_duy != exp_duy                         // [1_238]
                ){                                               // [1_238]
                                                                 // [1_238]
                    LOG( "[dug.m_dux]" , dug.m_dux );            // [1_238]
                    LOG( "[dug.m_duy]" , dug.m_duy );            // [1_238]
                                                                 // [1_238]
                    LOG( "[..exp_dux]" ,   exp_dux );            // [1_238]
                    LOG( "[..exp_duy]" ,   exp_duy );            // [1_238]
                                                                 // [1_238]
                    ERR( "[_FAILED_D4D_TO_DUG_TEST]" );;;;;;     // [1_238]
                };;                                              // [1_238]
                                                                 // [1_238]
            };;;//:NEXT[ t_i ]::::::::::::::::::::::::[1_237]:// // [1_238]
                                                                 // [1_238]


    F_TLT_UTM_DUG_D4D :


            let dug =( d_utm_dug_001 );                          // [1_238]
            let d4d =( d_utm_d4d_002 );                          // [1_238]
            let exp_gtx ; //: Expected_GTX ::::::::::::::://     // [1_238]
            let exp_gty ; //: Expected_GTY ::::::::::::::://     // [1_238]
            let exp_dix ; //: Expected_DIX ::::::::::::::://     // [1_238]
            let exp_diy ; //: Expected_DIY ::::::::::::::://     // [1_238]
            let bas     ; //: Base_Address ::::::::::::::://     // [1_238]
            let t_i     ; //: Test Index   ::::::::::::::://     // [1_238]
            let t_i_m_i ; //: MAX_DEX      ::::::::::::::://     // [1_238]
                                                                 // [1_238]
            const macro_num_tests=( 1 );;;;;;;;;;;;;;;;;;;;;     // [1_238]
                                                                 // [1_238]
            let utt_inn_dug=(F_ARR_U32( 2 * macro_num_tests      // [1_238]
                                                                 // [1_238]
            ,   0x00000000,0x00000000                            // [1_238]
            ));;                                                 // [1_238]
            let utt_out_d4d=(F_ARR_U32( 4 * macro_num_tests      // [1_238]
                                                                 // [1_238]
            ,   0x00000000,0x00000000,0x00000000,0x00000000      // [1_238]
            ));;                                                 // [1_238]
                                                                 // [1_238]
            t_i_m_i=( macro_num_tests - 1 );;;;;;;;;;;;;;;;;     // [1_238]
            for( t_i = 0 ; t_i <=( t_i_m_i ) ; t_i ++ ){ ///     // [1_238]
                                                                 // [1_238]
                bas =( t_i * 2 );;;;;;;;;;;;;;;;;;;;             // [1_238]
                dug.m_dux =( utt_inn_dug[ bas+0 ] );             // [1_238]
                dug.m_duy =( utt_inn_dug[ bas+1 ] );             // [1_238]
                                                                 // [1_238]
                bas =( t_i * 4 );;;;;;;;;;;;;;;;;;;;             // [1_238]
                exp_gtx =(   utt_out_d4d[ bas+0 ] );             // [1_238]
                exp_gty =(   utt_out_d4d[ bas+1 ] );             // [1_238]
                exp_dix =(   utt_out_d4d[ bas+2 ] );             // [1_238]
                exp_diy =(   utt_out_d4d[ bas+3 ] );             // [1_238]
                                                                 // [1_238]
                F_DUG_D4D( dug , d4d );                          // [1_238]
                                                                 // [1_238]
                if( d4d.m_gtx != exp_gtx                         // [1_238]
                ||  d4d.m_gty != exp_gty                         // [1_238]
                ||  d4d.m_dix != exp_dix                         // [1_238]
                ||  d4d.m_diy != exp_diy                         // [1_238]
                ){                                               // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                    LOG( "[d4d.m_gtx]" , d4d.m_gtx );            // [1_238]
                    LOG( "[..exp_gtx]" ,   exp_gtx );            // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                    LOG( "[d4d.m_gty]" , d4d.m_gty );            // [1_238]
                    LOG( "[..exp_gty]" ,   exp_gty );            // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                                                                 // [1_238]
                    MSG( "[/////////////////////]" );            // [1_238]
                                                                 // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                    LOG( "[d4d.m_dix]" , d4d.m_dix );            // [1_238]
                    LOG( "[..exp_dix]" ,   exp_dix );            // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                    LOG( "[d4d.m_diy]" , d4d.m_diy );            // [1_238]
                    LOG( "[..exp_diy]" ,   exp_diy );            // [1_238]
                    MSG( "[---------------------]" );            // [1_238]
                                                                 // [1_238]
                    ERR( "[_FAILED_DUG_TO_D4D_TEST]" );;;;;;     // [1_238]
                };;                                              // [1_238]
                                                                 // [1_238]
            };;;//:NEXT[ t_i ]::::::::::::::::::::::::[1_237]:// // [1_238]







